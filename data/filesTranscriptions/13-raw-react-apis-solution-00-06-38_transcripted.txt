all right let's get react on to this page showing so the first thing that we need to do is get react on the page using on package now on package is this awesome service that you can go take a look at in fact let's go and take a look at that right now so if you got unpackaged dot com it's a fast globally connected yada yada yada but basically all this does is it allows you to access anything that's on and PM just from the the browser using U. R. L. on a script tag which is awesome perfect for our use cases and so because react exposes a U. M. D. which is short for universal module definition it allows us to create a global variable in the browser that we can reference inside of our code and if you actually just go and pull that up you'll see here's react right there all that react code being served up for us from unpackaged big thank you to and package for creating this this is awesome so let's go ahead and get react on the page by removing these two lines and then with that saved we can take a look at our consul we'll see react is now on the page we have access to all of the cool things that react can do for us and we also have reacted don and it looks like there's some secret internals do not user you will be fired be careful don't use that but with these two things on the page we can now create react elements and render those elements to the page so the difference between react and react dom is react will actually allow you to create elements this is what we're going to be using most of the time and we actually don't end up using it directly most of the time we use JSX which will learn about soon but you create react elements very similar to how you create a DOM elements except react elements a very simple objects that kind of describe the U. Y. that you want to create and then you take that you I and you render it to to the page using react dom and the reason that these two things are separate is because reacts supports other platforms as well you have react native and react VR and so you can use the court 
react to create react elements for any of these platforms and then you use the proper platform specific package to get those react elements into the environment where you're shipping into whether that's native or done so that's why we're including react dom in here and we're gonna use react on to get stuff on to the page so let's go ahead and do that so in we're still gonna reference our root elements that we have right here in the body and that's where we're gonna be rendering our app is to this route but instead of creating our DOM element we're actually gonna create a react element so I'm gonna swap those and we're gonna create an element with reacts create element and instead of creating an element and then manipulating it well like we did here I'm gonna go ahead and say I want a diff just like we did before and then we'll pass an object of all of the properties that I want sent for this element so I'm gonna have a class name container and then instead of text content I'm actually going to use children so say children hello world I will say that and you notice we're getting object object the reason that we're getting now is because I'm still a pending this element to the root element using the Roddam API's to do that and what this moment is is actually an object and so what's happening here is we're getting it to string of that object and so the two string of an object is what we see right there which is not very helpful but let's go ahead and console like the elements and take a look at what this looks like let's get our consul here and we're gonna see this pretty simple object it has this double dollar type of thing which you don't really need to worry about it's just a way for react to recognize that this is indeed a legitimate react element we also have a key and some props and a raft of type and then some things that I don't even know what these things do but really what we're focused on here is the type which we specified right here and the props which we specified as the second argument here so we get a class name and we get our children so let's 
go ahead and take this element and say Hey react I got this cool object here I want you to take this element and put it in on to the page and so what react is gonna do is it'll create a DOM node that this represents it will set all the properties for us and then it will append that to the page similar to what we were doing before so instead of this now we're gonna say react DOM dot render and at the rack down render API takes our elements as the first argument and then it takes our root elements or the root DOM node as the second arguments are going to move this up we'll have these two totally separated and there we go we've got hello world and we still have our react element here and everything's working great so whereas before we were creating the domino it ourselves now react is taking this elements of this U. Y. descriptor object it's just kind of a description of the type of you why that we want to have created and when we call render it creates that element for us and then %HESITATION pens that element to the page similar to what we were doing before now right from the get go I don't really see a whole lot of benefit of using react over what we were doing but as we work through some of the stuff you'll see that react brings a lot more to the table than just the simple create elements and render API and I'm really looking forward to showing that to you so let's go and clean this up we'll get rid of that element will get rid of all these comments and let me give you just a quick review of some of the things that we did here so we're still getting the root element to that the browsers creating for this HTML and then we're creating a react element using react create element we're getting react on the page thanks to you at the universal module definition of the reacts package using on package which is so awesome and then we also bring in react dom which creates the global variable react on and we call render on that to render element to the root element just as a friendly reminder normally in production react applications you're not going to be putting everything into an HTML file like this and you're not 
a B. adding script tags and whatever you're gonna be using some sort of tool to create these applications and you use N. P. M. and yes models and everything in it work out super super nice but we're gonna stick with this HTML file for a little while just so you can kind of get the hang of the differences between the different abstractions that you're using before we jump into full on a suite of tools and stuff then it'll just help you draw lines around what the different roles and responsibilities of the different tools are and specifically the role of react is to create react elements and the role of react %HESITATION is to take those elements and put them on the page 
